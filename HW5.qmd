---
title: "Homework 5: Namit Shrivastava"
format: pdf
editor: visual
---

## 1. The following is the distribution of occupied housing units and blocks for two counties in Michigan. A stratified PPeS sample of n = 3000 housing units in a = 100 blocks with minimum sufficient size b\* per block is to be selected across the counties. The counties and the subdivisions within each county of river and non-river blocks serve as four (4) strata.

## a) Allocate the sample blocks across the four strata proportionate to occupied housing units. How have you handled rounding of sample blocks?

The proportionate allocation formula is:

$$n_h = a \times \frac{N_h}{N}$$

Where:

$n_h$ is the number of sample blocks allocated to stratum $h$ $a = 100$ is the total number of sample blocks to be selected $N_h$ is the number of occupied housing units in stratum $h$ $N$ is the total number of occupied housing units For each stratum:

$$n_1 = 100 \times \frac{8,521}{131,788} = 100 \times 0.0647 = 6.47$$

$$n_2 = 100 \times \frac{28,744}{131,788} = 100 \times 0.2181 = 21.81$$

$$n_3 = 100 \times \frac{17,224}{131,788} = 100 \times 0.1307 = 13.07$$

$$n_4 = 100 \times \frac{77,299}{131,788} = 100 \times 0.5866 = 58.66$$

Rounding to whole numbers:

Allegan_River: 6.47 -\> 6 Allegan_NonRiver: 21.81 -\> 22 Kalamazoo_River: 13.07 -\> 13 Kalamazoo_NonRiver: 58.66 -\> 59 The sum is 6 + 22 + 13 + 59 = 100, which equals our target.

So the R code for this is:

```{r}
# Creating data frame for the four strata
strata_data <- data.frame(
  stratum = c("Allegan_River", "Allegan_NonRiver", "Kalamazoo_River", "Kalamazoo_NonRiver"),
  occupied_units = c(8521, 37265-8521, 17224, 94523-17224),
  blocks = c(940, 3593-940, 1318, 4494-1318)
)

# Calculating total number of occupied housing units
strata_data$nonriver_units <- c(37265-8521, 0, 94523-17224, 0)
strata_data$occupied_units <- c(8521, 37265-8521, 17224, 94523-17224)

strata_data <- data.frame(
  stratum = c("Allegan_River", "Allegan_NonRiver", "Kalamazoo_River", "Kalamazoo_NonRiver"),
  occupied_units = c(8521, 37265-8521, 17224, 94523-17224),
  blocks = c(940, 3593-940, 1318, 4494-1318)
)

print(strata_data)
```

Now let me allocate the 100 sample blocks proportionate to occupied housing units:

```{r}
# Total number of sample blocks
total_sample_blocks <- 100

# Calculating total occupied housing units
total_occupied <- sum(strata_data$occupied_units)

# Calculating proportionate allocation
strata_data$proportion <- strata_data$occupied_units / total_occupied
strata_data$initial_allocation <- strata_data$proportion * total_sample_blocks
strata_data$fractional_part <- strata_data$initial_allocation - floor(strata_data$initial_allocation)
strata_data$rounded_allocation <- round(strata_data$initial_allocation)

# Checking if sum equals target
sum_allocations <- sum(strata_data$rounded_allocation)

if (sum_allocations != total_sample_blocks) {
  cat("Adjustments needed: Sum =", sum_allocations, "Target =", total_sample_blocks, "\n")
  
  # Adjusting based on fractional parts
  difference <- total_sample_blocks - sum_allocations
  
  if (difference > 0) {
    # Adding blocks to strata with largest fractional parts not rounded up
    order_candidates <- order(strata_data$fractional_part, decreasing = TRUE)
    for (i in seq_len(difference)) {
      strata_data$rounded_allocation[order_candidates[i]] <- 
        strata_data$rounded_allocation[order_candidates[i]] + 1
    }
  } else if (difference < 0) {
    # Removing blocks from strata with smallest fractional parts that were rounded up
    order_candidates <- order(strata_data$fractional_part)
    for (i in seq_len(abs(difference))) {
      strata_data$rounded_allocation[order_candidates[i]] <- 
        strata_data$rounded_allocation[order_candidates[i]] - 1
    }
  }
}
```

```{r}
print(strata_data[, c("stratum", "occupied_units", "proportion", 
                      "initial_allocation", "rounded_allocation")])
```

Now based on my calculations, I allocated the 100 sample blocks proportionately across the four strata using the number of occupied housing units in each stratum.

Allegan River, with 8,521 occupied units, was allocated 6 blocks, while Allegan Non-River, which has 28,744 occupied units, received 22 blocks. Kalamazoo River, with 17,224 occupied units, was assigned 13 blocks, and Kalamazoo Non-River, the largest stratum with 77,299 occupied units, was allocated 59 blocks.

These allocations were rounded from their initial fractional values to ensure the total number of blocks summed exactly to 100.

## b) Give the overall sampling fraction f across the four strata.

Now the overall sampling fraction represents the proportion of housing units selected:

$$f = \frac{n}{N}$$

Where:

$n = 3,000$ is the total sample size (housing units) $N = 131,788$ is the total number of occupied housing units

```{r}
# Total sample size
n <- 3000

# Calculate overall sampling fraction
f <- n / total_occupied

cat("Total occupied housing units (N):", total_occupied, "\n")
cat("Total sample size (n):", n, "\n")
cat("Overall sampling fraction (f):", f, "\n")
cat("As a percentage:", f * 100, "%\n")
```

$$f = \frac{3,000}{131,788} = 0.02277$$

The overall sampling fraction is approximately 0.02277 or about 2.28%, meaning we'll sample roughly 2.28% of all occupied housing units across the four strata.

## c) Maintaining epsem, what value of b\* should be used in each of the four strata?

For a PPS design to maintain equal probability of selection (epsem), we need to determine the appropriate b\* (minimum sufficient size) for each stratum.

The sampling fraction within each stratum should equal the overall sampling fraction:

$$\frac{b^*_h \times n_h}{N_h} = f$$

Solving for $b^*_h$:

$$b^*_h = \frac{f \times N_h}{n_h}$$

```{r}
# Calculating b* for each stratum
strata_data$b_star <- (f * strata_data$occupied_units) / strata_data$rounded_allocation

# Display results
print(strata_data[, c("stratum", "occupied_units", "rounded_allocation", "b_star")])
```

For each stratum:

$$b^*_1 = \frac{0.02277 \times 8,521}{6} = \frac{194.02}{6} \approx 32.34$$

$$b^*_2 = \frac{0.02277 \times 28,744}{22} = \frac{654.51}{22} \approx 29.75$$

$$b^*_3 = \frac{0.02277 \times 17,224}{13} = \frac{392.19}{13} \approx 30.17$$

$$b^*_4 = \frac{0.02277 \times 77,299}{59} = \frac{1,760.20}{59} \approx 29.83$$

After calculating the values of $b^*_h$ for each stratum, I found that Allegan River, with 8,521 occupied housing units and 6 allocated blocks, has a $b^*$ value of approximately 32.33.

Allegan Non-River, which includes 28,744 occupied units and was allocated 22 blocks, has a $b^*$ value of about 29.74. For Kalamazoo River, with 17,224 occupied units and 13 blocks, the $b^*$ value came out to roughly 30.16.

Lastly, Kalamazoo Non-River, the largest stratum with 77,299 occupied units and 59 blocks, has a $b^*$ value of around 29.82. These values represent the minimum sufficient size per block to maintain equal probability sampling across all strata.

## 2. Download the Excel file provided with this homework (a geographically sorted list of blocks).

## a) Select a systematic PPeS sample of a = 20 blocks from the list of A = 4,495 in the csv file. The minimum sufficient size for a block is 50 occupied housing units. Specify the sampling interval, and the random start. List selected blocks, the selection number (the random start plus interval), and the total number of occupied housing units in the sample blocks. Document how the random start was determined, in a way that would allow someone to replicate your selection process exactly.

Step 1: Preparing and checking the data

```{r}
library(readxl)
file_path <- "SM 625 Homework 5 PPeS & Stratified PPeS frames winter 2025.xlsx"
block_data <- read_excel(file_path, sheet = "PPeS frame")
# Examining the structure
head(block_data)
```

Step 2: Calculating the measure of size (MOS) for each block

For PPS sampling, I need to determine the measure of size (MOS) for each block. Since the minimum sufficient size (b\*) is 50 housing units, I'll use:

```{r}
names(block_data)[names(block_data) == "Housing units:  Occupied"] <- "OCC_HU"
# Calculating MOS using b* = 50
block_data$MOS <- pmax(block_data$OCC_HU, 50)

# Calculating cumulative MOS
block_data$CUM_MOS <- cumsum(block_data$MOS)

# Getting total MOS
total_MOS <- sum(block_data$MOS)

# Calculating sampling interval
a <- 20  # Number of blocks to select
I <- total_MOS / a

cat("Total Measure of Size:", total_MOS, "\n")
cat("Sampling Interval (I):", I, "\n")
```

Step 3: Generating a random start

```{r}
# Set seed for reproducibility
set.seed(625)

# Generating random start between 0 and I
R <- runif(1, 0, I)
cat("Random Start (R):", R, "\n")
```

Step 4: Determining the selection numbers

```{r}
# Calculating selection numbers
selection_numbers <- R + (0:(a-1)) * I
selection_numbers
```

Step 5: Selecting the blocks:

```{r}
# Function to find the block corresponding to a selection number
find_block <- function(sel_num, data) {
  position <- which(data$CUM_MOS >= sel_num)[1]
  return(data[position, ])
}

# Selecting the blocks
selected_indices <- sapply(selection_numbers, function(s) which(block_data$CUM_MOS >= s)[1])
selected_blocks <- block_data[selected_indices, ]

# Creating a data frame with selection information
selection_results <- data.frame(
  Selection_Number = selection_numbers,
  Block_ID = selected_blocks$ID,
  County = selected_blocks$COUNTY,
  Tract = selected_blocks$TRACT,
  Block = selected_blocks$BLOCK,
  Occupied_HU = selected_blocks$OCC_HU
)


print(selection_results)

# Calculating total occupied housing units in selected blocks
total_selected_OCC_HU <- sum(selected_blocks$OCC_HU)
cat("Total occupied housing units in selected blocks:", total_selected_OCC_HU, "\n")
```

So the selected blocks correspond to the selection numbers when matched with the cumulative MOS column in the dataset. For instance, the first block was identified at a cumulative MOS of 1,500, and subsequent blocks were chosen at intervals of approximately 3,293.8. The total number of occupied housing units across all selected blocks amounted to 468,171.

Hence, this systematic approach ensures that each block had a probability proportional to its size of being included in the sample.

## b) Do you have oversized units? If any, describe how you have handled oversized units.

Now from the lectures, in PPS sampling, an oversized unit occurs when a block's measure of size (MOS) is larger than the sampling interval. This causes the block to be selected with certainty and can distort the sample.

Step 1: Identifying if there are oversized units First, let me examine if any blocks have a MOS larger than our sampling interval:

```{r}
# Calculating sampling interval (from part a)
a <- 20  # Number of blocks to select
total_MOS <- sum(block_data$MOS)
I <- total_MOS / a

# Identifying oversized units
oversized_blocks <- block_data[block_data$MOS > I, ]

# Counting oversized units
num_oversized <- nrow(oversized_blocks)

cat("Sampling interval (I):", I, "\n")
cat("Number of oversized units:", num_oversized, "\n")

if(num_oversized > 0) {
  # Displaying oversized blocks
  print(oversized_blocks[, c("ID", "COUNTY", "TRACT", "BLOCK", "OCC_HU", "MOS")])
  
  # Calculating sum of MOS for oversized units
  sum_oversized_MOS <- sum(oversized_blocks$MOS)
  cat("Sum of MOS for oversized units:", sum_oversized_MOS, "\n")
}
```

So my analysis shows that there is 1 oversized block in the frame. This block has a MOS of 93,479, which significantly exceeds our sampling interval of 17,170.1. According to PPS sampling theory, this block should be selected with certainty.

Step 2: Handling the oversized unit The proper approach for handling oversized units is:

-   Select all oversized units with certainty (probability = 1)

-   Adjust the sample size for the remaining units

-   Apply PPS sampling to the non-oversized units

```{r}
# Separating oversized and non-oversized units
non_oversized_blocks <- block_data[block_data$MOS <= I, ]

# Calculating adjusted sample size
a_adjusted <- a - num_oversized

# Calculating new total MOS for non-oversized units
total_MOS_adjusted <- sum(non_oversized_blocks$MOS)

# Calculating adjusted sampling interval
I_adjusted <- total_MOS_adjusted / a_adjusted

# Recalculating cumulative MOS for non-oversized units
non_oversized_blocks$CUM_MOS_adjusted <- cumsum(non_oversized_blocks$MOS)

cat("Original sample size (a):", a, "\n")
cat("Number of oversized units selected with certainty:", num_oversized, "\n")
cat("Adjusted sample size for non-oversized units (a_adjusted):", a_adjusted, "\n")
cat("Original sampling interval:", I, "\n")
cat("Adjusted sampling interval:", I_adjusted, "\n")
```

Step 3: Now selecting the adjusted sample from non-oversized units

```{r}
# Setting seed for reproducibility (same as part a)
set.seed(625)

# Generating random start for adjusted sampling
R_adjusted <- runif(1, 0, I_adjusted)
cat("Adjusted random start:", R_adjusted, "\n")

# Calculating adjusted selection numbers
selection_numbers_adjusted <- R_adjusted + (0:(a_adjusted-1)) * I_adjusted

# Selecting blocks from non-oversized units
selected_indices_adjusted <- sapply(
  selection_numbers_adjusted, 
  function(s) which(non_oversized_blocks$CUM_MOS_adjusted >= s)[1]
)

selected_blocks_adjusted <- non_oversized_blocks[selected_indices_adjusted, ]

# Creating final results table
selection_results_adjusted <- data.frame(
  Selection_Type = rep("PPS", nrow(selected_blocks_adjusted)),
  Selection_Number = selection_numbers_adjusted,
  Block_ID = selected_blocks_adjusted$ID,
  County = selected_blocks_adjusted$COUNTY,
  Tract = selected_blocks_adjusted$TRACT,
  Block = selected_blocks_adjusted$BLOCK,
  Occupied_HU = selected_blocks_adjusted$OCC_HU,
  MOS = selected_blocks_adjusted$MOS
)
```

```{r}
# Adding oversized unit to final selection
selection_results_final <- rbind(
  data.frame(
    Selection_Type = "Certainty (Oversized)",
    Selection_Number = NA,
    Block_ID = oversized_blocks$ID,
    County = oversized_blocks$COUNTY,
    Tract = oversized_blocks$TRACT,
    Block = oversized_blocks$BLOCK,
    Occupied_HU = oversized_blocks$OCC_HU,
    MOS = oversized_blocks$MOS
  ),
  selection_results_adjusted
)

# Displaying final results
print(selection_results_final)

# Calculating total occupied housing units in final sample
total_selected_OCC_HU_final <- sum(selection_results_final$Occupied_HU, na.rm = TRUE)
cat("Total occupied housing units in final sample:", total_selected_OCC_HU_final, "\n")
```

Looking at my results from the PPS sampling, I found a very interesting situation with one oversized unit. This unit has 93,479 occupied housing units, which is more than 5 times larger than my sampling interval of 17,170.1. Since this unit would have a selection probability greater than 1 using standard PPS methods, I had to select it with certainty and adjust my approach for the remaining 19 selections.

After recalculating the sampling interval for the non-oversized units, I selected the remaining blocks using a systematic PPS approach with a new random start and interval. My final sample includes this large unit plus 19 other blocks with varying sizes, many of which had fewer than 50 occupied housing units (and were therefore assigned the minimum size of 50).

The total number of occupied housing units in my final sample came to 93,760, with the oversized unit accounting for about 99.7% of this total. This actually demonstrates how a single extremely large unit can dominate a PPS sample, which is an important consideration when analyzing survey data with such uneven size distributions.

## c) Suppose the following are the first five blocks selected.

## i) Implement the ‘linking after selection’ procedure described in the lecture notes for each of these five selections, and describe the five resulting linked blocks that would be included in the sample.

So I remember in systematic PPS sampling with geographic ordering, "linking after selection" is a procedure to enhance geographical representation. When a block is selected, we replace it with a "linked" block based on geographic proximity to improve spatial distribution.

Step 1: Identifying the Selected Blocks

```{r}
# Defining the five selected blocks from the problem statement
selected_blocks_input <- data.frame(
  ID = c(142, 349, 452, 655, 789),
  STATE = rep("26", 5),
  COUNTY = rep("077", 5),
  TRACT = c("000201", "000500", "000600", "001000", "001300"),
  BLKGRP = c("1", "2", "4", "6", "1"),
  BLOCK = c("1064", "2002", "4001", "6013", "1016")
)

# Displaying the selected blocks
print(selected_blocks_input)

selected_blocks <- block_data[block_data$ID %in% selected_blocks_input$ID, ]
cat("Number of selected blocks found in dataset:", nrow(selected_blocks), "\n")
```

Step 2: Defining Linking Rules

For each selected block, I'll find a linked block based on these rules:

-   The linked block should be in the same census tract

-   It should be geographically adjacent (next block in sequence if possible)

-   It should have similar size (similar number of occupied housing units)

```{r}
# Applying linking procedure to each selected block
linked_blocks <- list()

for(i in 1:nrow(selected_blocks_input)) {
  # Getting current block information
  current_id <- selected_blocks_input$ID[i]
  current_tract <- selected_blocks_input$TRACT[i]
  current_blkgrp <- selected_blocks_input$BLKGRP[i]
  current_block <- selected_blocks_input$BLOCK[i]
  
  # Finding blocks in the same tract
  same_tract <- block_data[block_data$TRACT == current_tract, ]
  
  if(nrow(same_tract) > 0) {
    # Finding blocks in the same block group but different block
    same_bg_diff_block <- same_tract[
      same_tract$BLKGRP == current_blkgrp & 
      same_tract$BLOCK != current_block, 
    ]
    
    if(nrow(same_bg_diff_block) > 0) {
      # Finding block with closest ID (typically adjacent)
      id_diff <- abs(same_bg_diff_block$ID - current_id)
      linked <- same_bg_diff_block[which.min(id_diff), ]
    } else {
      # If no blocks in same block group, use closest block in same tract
      id_diff <- abs(same_tract$ID - current_id)
      # Excluding the selected block itself if present
      id_diff[same_tract$ID == current_id] <- Inf
      linked <- same_tract[which.min(id_diff), ]
    }
    
    linked_blocks[[i]] <- linked
  } else {
    cat("No blocks found in tract", current_tract, "for selection", i, "\n")
  }
}

linked_blocks_df <- do.call(rbind, linked_blocks)
```

Step 3: Displaying Results

```{r}
# Create a comparison table
results <- data.frame(
  Original_ID = selected_blocks_input$ID,
  Original_TRACT = selected_blocks_input$TRACT,
  Original_BLKGRP = selected_blocks_input$BLKGRP,
  Original_BLOCK = selected_blocks_input$BLOCK,
  Linked_ID = linked_blocks_df$ID,
  Linked_TRACT = linked_blocks_df$TRACT,
  Linked_BLKGRP = linked_blocks_df$BLKGRP,
  Linked_BLOCK = linked_blocks_df$BLOCK,
  Linked_OCC_HU = linked_blocks_df$OCC_HU
)

print(results)

# Calculate summary statistics
cat("\nSummary Statistics for Linked Blocks:\n")
cat("Average Occupied Housing Units:", mean(linked_blocks_df$OCC_HU), "\n")
cat("Total Occupied Housing Units:", sum(linked_blocks_df$OCC_HU), "\n")
```

Looking at my linking results, I found that each of the five originally selected blocks was successfully paired with a linked block from the same tract and block group.

For example, block ID 142 in tract 000201, block group 1 was linked to block 141 in the same tract and block group, just with a different block number (1063).

Similarly, block 349 was linked to block 348, which shares the same tract (000500) and block group (2). This pattern continued for all five selections, where I consistently found a geographically adjacent block (as indicated by similar ID numbers) to replace the original selection. Interestingly, the average number of occupied housing units in my linked blocks was only 17.2, with a total of 86 housing units across all five linked blocks.

The first linked block actually had zero occupied housing units, while the others ranged from 12 to 35 units. This linking procedure allowed me to maintain the geographic distribution of my sample at the tract level while potentially improving spatial coverage by selecting nearby blocks that might better represent different neighborhood characteristics.

## ii) The overall sampling fraction is f = 0.001. What sampling rates should be used within each of the five sets of linked blocks to achieve epsem across the two stages (blocks, then occupied housing units)? (Hint: Remember that the housing units at the second stage will be randomly selected from all units in the set of linked blocks, not just the units in the five original selections above.)

Now in a two-stage sampling design with PPS selection of blocks followed by sampling of housing units within blocks, I need to determine appropriate second-stage sampling rates to achieve EPSEM (Equal Probability of Selection Method) across the entire sample.

The Mathematical Framework for EPSEM is that each housing unit in the population should have the same overall probability of selection. This probability is the product of:

-   The probability of selecting the block ($\pi_i$)

-   The probability of selecting a housing unit within the selected block ($\phi_i$)

Given the overall sampling fraction $f = 0.001$, we need:

$$f = \pi_i \times \phi_i$$

Solving for the second-stage sampling rate:

$$\phi_i = \frac{f}{\pi_i}$$

In PPS sampling, the probability of selecting a block is proportional to its measure of size (MOS):

$$\pi_i = \frac{M_i}{M} \times a$$

Where:

$M_i$ is the measure of size for block $i$ $M$ is the total measure of size $a$ is the number of blocks to be selected

Implementing this approach in R now:

```{r}
# Overall sampling fraction
f <- 0.001

# Defining the linked blocks from previous step
linked_blocks <- data.frame(
  ID = c(141, 348, 451, 654, 788),
  TRACT = c("000201", "000500", "000600", "001000", "001300"),
  BLKGRP = c("1", "2", "4", "6", "1"),
  BLOCK = c("1063", "2001", "4000", "6012", "1015"),
  OCC_HU = c(0, 21, 35, 18, 12)
)

# Calculating MOS for each linked block (using min. sufficient size of 50)
linked_blocks$MOS <- pmax(linked_blocks$OCC_HU, 50)

# Calculate first-stage selection probabilities
# In PPS sampling with a minimum sufficient size (b*), the probability 
# of selection is proportional to max(occupied_units, b*)
total_MOS <- sum(block_data$MOS)  # From previous calculations
a <- 20  # Number of blocks to select

# Calculating first-stage selection probabilities
linked_blocks$pi <- (linked_blocks$MOS / total_MOS) * a

# Calculating second-stage sampling rates to achieve EPSEM
linked_blocks$phi <- f / linked_blocks$pi

# Handle special cases where OCC_HU = 0
linked_blocks$sampling_rate <- ifelse(linked_blocks$OCC_HU > 0, 
                                     linked_blocks$phi, 0)

# Display results
print(linked_blocks[, c("ID", "TRACT", "BLOCK", "OCC_HU", "MOS", "pi", "phi", "sampling_rate")])

# Number of housing units to sample from each linked block
linked_blocks$sample_size <- round(linked_blocks$OCC_HU * linked_blocks$phi)
print(linked_blocks[, c("ID", "OCC_HU", "phi", "sample_size")])
```

For each linked block the step-by-step calculations are:

## Block 1 (ID: 141, Tract: 000201)

OCC_HU = 0 MOS = max(0, 50) = 50 $\pi_1 = \frac{50}{M} \times 20$ $\phi_1 = \frac{0.001}{\pi_1}$ Since OCC_HU = 0, no housing units can be sampled from this block

## Block 2 (ID: 348, Tract: 000500)

OCC_HU = 21 MOS = max(21, 50) = 50 $\pi_2 = \frac{50}{M} \times 20$ $\phi_2 = \frac{0.001}{\pi_2}$ Sample size = OCC_HU × $\phi_2$ = 21 × $\phi_2$

## Block 3 (ID: 451, Tract: 000600)

OCC_HU = 35 MOS = max(35, 50) = 50 $\pi_3 = \frac{50}{M} \times 20$ $\phi_3 = \frac{0.001}{\pi_3}$ Sample size = OCC_HU × $\phi_3$ = 35 × $\phi_3$

## Block 4 (ID: 654, Tract: 001000)

OCC_HU = 18 MOS = max(18, 50) = 50 $\pi_4 = \frac{50}{M} \times 20$ $\phi_4 = \frac{0.001}{\pi_4}$ Sample size = OCC_HU × $\phi_4$ = 18 × $\phi_4$

## Block 5 (ID: 788, Tract: 001300)

OCC_HU = 12 MOS = max(12, 50) = 50 $\pi_5 = \frac{50}{M} \times 20$ $\phi_5 = \frac{0.001}{\pi_5}$ Sample size = OCC_HU × $\phi_5$ = 12 × $\phi_5$

So, looking at my EPSEM calculations for the two-stage sampling design, I found that all five linked blocks have the same first-stage selection probability (pi = 0.002912) because they all have the same measure of size (MOS = 50) due to the minimum sufficient size requirement.

So to achieve an overall sampling fraction of 0.001, I needed to set the second-stage sampling rate to approximately 0.343 for each block. This means I should sample about 34.3% of the occupied housing units within each linked block. When I applied this rate to the actual number of occupied units in each block, I determined I should select 0 units from the first block (which has no occupied units), 7 units from the second block (containing 21 units), 12 units from the third block (with 35 units), 6 units from the fourth block (with 18 units), and 4 units from the fifth block (with 12 units).

This gives me a total of 29 housing units in my final sample. The beauty of this approach is that every housing unit in the population ends up with exactly the same probability (0.001) of being included in my sample, which is crucial for obtaining unbiased estimates from my survey data.

## iii) For the first “linked” selection, suppose that field canvassing procedures yield B1=90. What two possible values might you see for the achieved subsample size from the first selection?

Right, so when field canvassing finds more housing units than expected in a selected block, we need to recalculate the subsample size to maintain EPSEM. This situation arises with the first linked block, where our frame showed 0 occupied housing units, but field canvassing found 90 units (B1 = 90).

So the mathematical framework shows the key formulas for determining the subsample size which is:

-   For EPSEM, the overall selection probability must remain constant at $f = 0.001$

-   The first-stage selection probability (PPS) is: $$\pi_1 = \frac{MOS_1}{M} \times a$$

-   The second-stage sampling rate needed is: $$\phi_1 = \frac{f}{\pi_1}$$

-   The achieved subsample size is: $$b_1 = B_1 \times \phi_1$$

However, there are two possible scenarios for interpreting the first-stage probability:

1.  Using original MOS from the frame

The first linked block had $$MOS_1$$ = 50 in our sampling frame.

First-stage selection probability: $$\pi_1 = \frac{50}{M} \times 20 = 0.002912$$

Second-stage sampling rate: $$\phi_1 = \frac{0.001}{0.002912} = 0.343402$$

Achieved subsample size: $$b_1 = 90 \times 0.343402 = 30.91$$

Rounding to the nearest integer: 31 housing units

2.  Using actual number of occupied units

First-stage selection probability (if I had known the actual count): $$\pi_1 = \frac{90}{M} \times 20 = 0.005242$$

Second-stage sampling rate: $$\phi_1 = \frac{0.001}{0.005242} = 0.190779$$

Achieved subsample size: $$b_1 = 90 \times 0.190779 = 17.17$$

Rounding to the nearest integer: 17 housing units

```{r}
# Defining given values
f <- 0.001  # Overall sampling fraction
B1 <- 90    # Actual number of occupied housing units found
total_MOS <- sum(block_data$MOS)  # From previous calculations
a <- 20     # Number of blocks to select

# Scenario 1: Using original MOS (minimum sufficient size)
MOS1_original <- 50
pi1_original <- (MOS1_original / total_MOS) * a
phi1_original <- f / pi1_original
b1_original <- round(B1 * phi1_original)

# Scenario 2: Using actual occupied units
MOS1_actual <- 90
pi1_actual <- (MOS1_actual / total_MOS) * a
phi1_actual <- f / pi1_actual
b1_actual <- round(B1 * phi1_actual)

results <- data.frame(
  Scenario = c("Using original MOS", "Using actual units"),
  MOS = c(MOS1_original, MOS1_actual),
  pi = c(pi1_original, pi1_actual),
  phi = c(phi1_original, phi1_actual),
  Achieved_sample_size = c(b1_original, b1_actual)
)

print(results)
```

Looking at the results from my calculations for the first linked block's subsample size, I found two possible approaches when field canvassing revealed 90 occupied housing units instead of the zero units shown in the sampling frame.

Using the original measure of size (MOS=50) from the frame, I calculated a first-stage selection probability of 0.00291 and a corresponding sampling rate of 0.343. This means I'd need to select 31 housing units from this block to maintain EPSEM. However, if I recalculate using the actual number of occupied units (90) as the MOS, the first-stage probability increases to 0.00524, requiring a lower sampling rate of 0.191 to compensate, which results in a subsample of just 17 housing units.

This difference illustrates an important practical consideration in survey implementation like how to handle field discoveries that differ from the sampling frame. The first approach (31 units) maintains the original selection probabilities as designed, while the second approach (17 units) adjusts for what we would have done had we known the true count in advance. Either approach would maintain EPSEM, but they reflect different philosophies about handling frame discrepancies.
